Model Prostate KNN Accuracy: 0.80
id diagnosis_result radius texture perimeter area smoothness compactness symmetry fractal_dimensio
0 1 1 23 12 151 954 0.143 0.278 0.242 0.0
1 2 0 9 13 133 1326 0.143 0.079 0.181 0.0
2 3 1 21 27 130 1203 0.125 0.160 0.207 0.0
3 4 1 14 16 78 386 0.070 0.284 0.260 0.0
4 5 1 9 19 135 1297 0.141 0.133 0.181 0.0
... ... ... ... ... ... ... ... ... ...
95 96 1 23 16 132 1264 0.091 0.131 0.210 0.0
96 97 0 22 14 78 451 0.105 0.071 0.190 0.0
97 98 0 19 27 62 295 0.102 0.053 0.135 0.0
98 99 0 21 24 74 413 0.090 0.075 0.162 0.0
99 100 1 16 27 94 643 0.098 0.114 0.188 0.0
100 rows × 10 columns
In [72]:
import pandas as pand
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
In [73]:
myProstateData = pand.read_csv("Prostate_Cancer.csv")
myProstateData['diagnosis_result'] = [1 if element == 'M' else 0 for element in myProsta
myProstateData
Out[73]: In [74]:
xProstate = myProstateData.drop(['diagnosis_result'], axis=1)
yProstate = myProstateData['diagnosis_result'].values
In [75]:
XtrainD, XtestD, ytrainD, ytestD = train_test_split(xProstate, yProstate, test_size=0.2,
In [84]:
standScal = StandardScaler()
XtrainD = standScal.fit_transform(XtrainD)
XtestD = standScal.transform(XtestD)
In [85]:
from sklearn.neighbors import KNeighborsClassifier
knnModel = KNeighborsClassifier (n_neighbors=3)
knnModel.fit(XtrainD, ytrainD)
Out[85]: In [90]:
y_pred = knnModel.predict(XtestD)
Modelacc = accuracy_score(ytestD, y_pred)
print(f"Model Prostate KNN Accuracy: {Modelacc: .2f}")
In [ ]:
▾ KNeighborsClassifier
KNeighborsClassifier(n_neighbors=3)
